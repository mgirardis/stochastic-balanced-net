[pythran]

# optimization chain used by Pythran
# It's a list of space separated optimization to apply in the given order
optimizations = pythran.optimizations.InlineBuiltins
                pythran.optimizations.Inlining
                pythran.optimizations.RemoveDeadFunctions
                pythran.optimizations.ForwardSubstitution
                pythran.optimizations.DeadCodeElimination
                pythran.optimizations.ConstantFolding
                pythran.optimizations.PartialConstantFolding
                pythran.optimizations.IterTransformation
                pythran.optimizations.LoopFullUnrolling
                pythran.optimizations.ModIndex
                pythran.transformations.FalsePolymorphism
                pythran.optimizations.PatternTransform
                pythran.optimizations.Square
                pythran.optimizations.RangeLoopUnfolding
                pythran.optimizations.RangeBasedSimplify
                pythran.optimizations.ListToTuple
                pythran.optimizations.TupleToShape

complex_hook = False

[compiler]
defines=
undefs=
include_dirs=
libs=
library_dirs=
cflags=-std=c++11 -fno-math-errno -fvisibility=hidden -fno-wrapv -Wno-unused-function -Wno-int-in-bool-context -Wno-unknown-warning-option -Wno-unused-variable -Wmaybe-uninitialized
ldflags=-fvisibility=hidden -Wl,-strip-all
blas=blas
CC=
CXX=
ignoreflags=-Wstrict-prototypes


[typing]

# maximum number of container access taken into account during type inference
# increasing this value inreases typing accuracy
# but slows down compilation time, to the point of making g++ crash
#max_container_type = 2 ###### gcc crashed with this value -- Mauricio
max_container_type = 2

# maximum number of combiner per user function
# increasing this value inreases typing accuracy
# but slows down compilation time, to the point of making g++ crash
#max_combiner = 2 ###### gcc crashed with this value -- Mauricio
max_combiner = 1

# set this to true to enable a costly yet more accurate type inference algorithm
# This algorithms generates code difficult to compile for g++, but not clang++
enable_two_steps_typing = False

# above this number of overloads, pythran specifications are considered invalid
# as it generates ultra-large binaries
#max_export_overloads =  128 ###### gcc crashed with this value -- Mauricio
max_export_overloads = 10
